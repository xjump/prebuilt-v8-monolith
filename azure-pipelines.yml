trigger:
- master

jobs:
- job: "BuildV8"
  timeoutInMinutes: 240
  strategy:
    matrix:
      linux:
        imageName: "ubuntu-16.04"
      mac:
        imageName: "macos-10.13"
      windows:
        imageName: "vs2017-win2016"
        python.version: '2.7'
    maxParallel: 30
  pool:
    vmImage: $(imageName)

  steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '2.7'
        addToPath: true 
        architecture: 'x64'
    # Linux
    - bash: |
        export V8_DIR=$HOME/v8
        export V8_VERSION=7.9.110
        echo "##vso[task.setvariable variable=V8_VERSION]7.9.110"
        export BUILD_DIR=$HOME/buildout
        chmod +x build_linux_and_mac.sh
        ./build_linux_and_mac.sh
      condition: eq( variables['Agent.OS'], 'Linux' )
      displayName: Build V8 on Linux

    # macOS
    - bash: |
        export V8_DIR=$HOME/v8
        export V8_VERSION=7.9.110
        echo "##vso[task.setvariable variable=V8_VERSION]7.9.110"
        export BUILD_DIR=$HOME/buildout
        chmod +x build_linux_and_mac.sh
        ./build_linux_and_mac.sh
      condition: eq( variables['Agent.OS'], 'Darwin' )
      displayName: Build V8 on macOS

    # Windows
    - powershell: |
        Set-Variable -Name V8_VERSION -Value '7.9.110'
        Set-Variable -Name V8_DIR -Value "$HOME/v8"
        Write-Host $V8_VERSION

        $build_dir = "$HOME/buildout"
        mkdir $build_dir
        $Env:BUILDDIR = $build_dir
        Write-Host "##vso[task.setvariable variable=BUILD_DIR]$Env:BUILDDIR"
        Write-Host "##vso[task.setvariable variable=V8_VERSION]7.9.110"
       
        $Env:RUST_BACKTRACE='full'
        $Env:DEPOT_TOOLS_WIN_TOOLCHAIN=0
        $Env:GYP_MSVS_VERSION=2017
        $Env:DEPOT_TOOLS_UPDATE=0 
        $Env:GYP_CHROMIUM_NO_ACTION=0
        $Env:VPYTHON_BYPASS='manually managed python not supported by chrome operations'
        $custom_v8 = $HOME + '/v8'
        $Env:CUSTOM_V8 = $custom_v8
        echo $HOME

        ########################################################################
        ###    build v8
        ########################################################################
        git config --global core.symlinks true
        cd $HOME

        # Download the file
        $clnt = new-object System.Net.WebClient
        $url = "https://storage.googleapis.com/chrome-infra/depot_tools.zip"
        $file = "c:\depot_tools.zip"
        $clnt.DownloadFile($url,$file)

        # Unzip the file to current location
        $shell_app=new-object -com shell.application 
        $zip_file = $shell_app.namespace($file)
        mkdir  $HOME/depot_tools
        $destination = $shell_app.namespace("$HOME\depot_tools") 
        $destination.Copyhere($zip_file.items())

        $Env:path = "$HOME/depot_tools;" + $Env:path

        cd $HOME
        fetch v8
        cd v8

        git checkout $V8_VERSION
        gclient sync

        $vcvarsall_dir = "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build"
        cd $vcvarsall_dir
        .\vcvarsall.bat x64

        cd $HOME
        cd v8

        gn gen --ide=vs2017 --args="v8_monolithic=true is_clang=false v8_use_external_startup_data=false use_custom_libcxx=false is_debug=false v8_static_library=true" out.gn\x64.release
        # tools/dev/v8gen.py x64.release -- v8_monolithic=true v8_use_external_startup_data=false use_custom_libcxx=false is_debug=false v8_static_library=true
        tools/dev/v8gen.py list

        cd $HOME/v8/out.gn/x64.release
        ninja

        cd $HOME/v8 
        del ./.git -Force -Recurse
        dir $HOME/v8/out.gn/x64.release
        dir $HOME/v8/out.gn/x64.release/obj
        dir $HOME/v8/out.gn/x64.release/obj/third_party/icu
        
        md $HOME/build_out
        md $HOME/build_out/v8_
        md $HOME/build_out/v8/src
        md $HOME/build_out/v8/lib
        md $HOME/build_out/v8/lib/third_party
        md $HOME/build_out/v8/lib/third_party/icu
        md $HOME/build_out/v8/include

        $src = "$HOME\v8\out.gn\x64.release\obj\*.lib"
        $dest = "$HOME\build_out\v8\lib"
        echo $src
        echo $dest
        xcopy $src $dest /E /Y

        $src = "$HOME\v8\out.gn\x64.release\obj\third_party\icu\*.lib"
        $dest = "$HOME\build_out\v8\lib\third_party\icu"
        echo $src
        echo $dest
        xcopy $src $dest /E /Y

        $src = "$HOME\v8\include"
        $dest = "$HOME\build_out\v8\include"
        echo $src
        echo $dest
        xcopy $src $dest /E /Y

        # xcopy $HOME/node/node-12.11.1/deps/v8 $HOME/build_out/v8/src /E /Y
        #$src = "$HOME\\node\\node-$node_version\\deps\\v8"
        #$dest = "$HOME\\build_out\\v8\\src"
        #echo $src
        #echo $dest
        #cmd /c xcopy $src $dest /E /Y

      condition: eq( variables['Agent.OS'], 'Windows_NT' )
      displayName: Build V8 on Windows

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(BUILD_DIR)/../build_out' 
        includeRootFolder: true 
        archiveType: 'zip' # Options: zip, 7z, tar, wim
        #tarCompression: 'gz' # Optional. Options: gz, bz2, xz, none
        archiveFile: '$(BUILD_DIR)/prebuilt-v8-windows-$(V8_VERSION).zip' 
        replaceExistingArchive: true 
        verbose: false # Optional
        #quiet: # Optional
      condition: eq( variables['Agent.OS'], 'Windows_NT' )
      displayName: Zip v8 on Windows

    - task: GithubRelease@0 
      displayName: 'Create GitHub Release on Windows'      
      inputs:
        gitHubConnection: 'xjump_token'
        repositoryName: 'xjump/prebuilt-v8-monolith'
        action: 'edit'
        addChangeLog: false
        target: '$(build.sourceVersion)'
        tagSource: 'Git tag'
        tag: '1.0-$(V8_VERSION)'
        assetUploadMode: 'replace'
        assets: |
          $(BUILD_DIR)/*.zip
      condition: eq( variables['Agent.OS'], 'Windows_NT' )

    - task: GithubRelease@0 
      displayName: 'Create GitHub Release on Linux or macOS'      
      inputs:
        gitHubConnection: 'xjump_token'
        repositoryName: 'xjump/prebuilt-v8-monolith'
        action: 'edit'
        addChangeLog: false
        target: '$(build.sourceVersion)'
        tagSource: 'Git tag'
        tag: '1.0-$(V8_VERSION)'
        assetUploadMode: 'replace'
        assets: |
          $(HOME)/buildout/*.zip
      condition: not ( eq( variables['Agent.OS'], 'Windows_NT' ) )


